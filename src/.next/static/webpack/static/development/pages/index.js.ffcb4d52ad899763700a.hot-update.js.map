{"version":3,"file":"static/webpack/static/development/pages/index.js.ffcb4d52ad899763700a.hot-update.js","sources":["webpack:///./pages/index.tsx"],"sourcesContent":["import { Component } from 'react';\n\ntype State = {\n  hash?: string;\n  result: any;\n  inputValue?: string;\n};\n\nclass Index extends Component {\n  state: State = {\n    result: null,\n    inputValue: '',\n  };\n\n  private db: any;\n\n  componentDidMount() {\n    const IPFS = require('ipfs');\n    const OrbitDB = require('orbit-db');\n\n    // OrbitDB uses Pubsub which is an experimental feature\n    // and need to be turned on manually.\n    // Note that these options need to be passed to IPFS in\n    // all examples even if not specified so.\n    const ipfsOptions = {\n      EXPERIMENTAL: {\n        pubsub: true\n      }\n    };\n\n    // Create IPFS instance\n    const ipfs = new IPFS(ipfsOptions);\n\n    ipfs.on('error', (error: Error) => {\n      console.error(error);\n    });\n\n    ipfs.on('ready', async () => {\n      const orbitdb = await OrbitDB.createInstance(ipfs);\n\n      // Create / Open a database\n      const db = this.db = await orbitdb.docs('orbit.test');\n      await db.load();\n\n      // Listen for updates from peers\n      db.events.on('replicated', () => {\n        console.log('replicated', db.iterator({ limit: -1 }).collect());\n      });\n    });\n  }\n\n  onInputChange = (ev: React.SyntheticEvent<HTMLInputElement>) => {\n    this.setState({\n      inputValue: ev.currentTarget.value,\n    });\n  }\n\n  onInsertDocument = async () => {\n    const { inputValue } = this.state;\n\n    const hash = await this.db.put({ name: inputValue });\n\n    // Query\n    const result = this.db.iterator({ limit: -1 }).collect();\n\n    this.setState({\n      hash,\n      result,\n    });\n  }\n\n  render() {\n    const {\n      hash,\n      result,\n      inputValue,\n    } = this.state;\n\n    return (\n      <div>\n        <div>\n          <input\n            type=\"text\"\n            value={inputValue}\n            onChange={this.onInputChange}\n            placeholder=\"Insert\"\n          />\n          <button\n            type=\"button\"\n            onClick={this.onInsertDocument}\n          >\n            insert\n          </button>\n        </div>\n\n        {hash && (\n          <div>\n            <h3>Hash</h3>\n            <pre>{JSON.stringify(hash, null, 2)}</pre>\n          </div>\n        )}\n\n        {result && (\n          <div>\n            <h3>Result</h3>\n            <pre>{JSON.stringify(result, null, 2)}</pre>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Index;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAOA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AAyCA;AACA;AACA;AADA;AAGA;AACA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AACA;AAJA;AAGA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AA1CA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AADA;AADA;AACA;AAMA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAIA;AAJA;AAAA;AACA;AADA;AAOA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;;;AAsBA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AAtGA;AACA;AAwGA;;;;A","sourceRoot":""}